require("CardMetadata")

local tagTargetGuid = ""
local verifyTargetGuid = ""
local moveTargetGuid = ""
local allCardsBagGuid = ""

function allCardsGuidChanged(player, value)
  allCardsBagGuid = value
end

function moveTargetGuidChanged(player, value)
  moveTargetGuid = value
end

function verifyTargetGuidChanged(player, value)
  verifyTargetGuid = value
end

function tagTargetGuidChanged(player, value)
  tagTargetGuid = value
end

-- Starts the operation to tag cards identified by the Tag field GUID
function tagCards()
  local tagTarget = getObjectFromGUID(tagTargetGuid)
  if (tagTarget.name == "Card") then
    tagSingleCard(tagTargetGuid)
  elseif (tagTarget.name == "Bag" or tagTarget.name == "Deck") then
    startLuaCoroutine(self, "tagContainer")
  else
    broadcastToAll("Tag GUID does not point to a card, deck, or bag")
    return
  end
end

-- Matches a single card to the metadata entry, and sets the GM Notes field with
-- the metadata.  It then moves that card to either a good or bad pile, based
-- on success
-- Parameter targetGuid: GUID of the card to be tagged
function tagSingleCard(targetGuid)
  local targetCard = getObjectFromGUID(targetGuid)
  local goodPosition = self.positionToWorld({3, 1, 0})
  local badPosition = self.positionToWorld({3, 1, -1})
  -- Try and match the metadata using both name and subname
  local name = targetCard.getName().."|"
  if (targetCard.getDescription() ~= nil) then
    name = name..targetCard.getDescription()
  end
  -- If we miss name+subname, try and match based on just the name
  local cardJson = allCards[name]
  if (cardJson == nil) then
    name = targetCard.getName().."|"
  end
  cardJson = allCards[name]
  -- If we still don't hit it, try and match based on ArkhamID.  This will
  -- only work to update cards that already have metadata but will be handy
  -- for cards with special characters, which otherwise fail the lookup
  if (cardJson == nil and targetCard.getGMNotes() ~= nil) then
    local metadata = JSON.decode(targetCard.getGMNotes())
    if (metadata ~= nil and metadata.id ~= nil) then
      cardJson = allCards[metadata.id]
    end
  end
  if (cardJson == nil) then
    log("Could not find data for "..name);
    targetCard.setPosition(badPosition)
  else
    targetCard.setGMNotes(cardJson)
    targetCard.setPosition(goodPosition)
  end
end

-- Coroutine to tag all cards in a given container.  Since we can't pass
-- parameters to a coroutine, uses the value in tagTargetGuid to find the
-- container to be tagged.  All cards will be tagged and moved to either the
-- good or bad piles based on success.
function tagContainer()
  local tagTarget = getObjectFromGUID(tagTargetGuid)
  local tempPosition = Vector(20, 1, 0)
  local cardsProcessed = 0
  local isDeck = false
  local deckPosition
  if (tagTarget.name == "Deck") then
    isDeck = true
    deckPosition = Vector(tagTarget.getPosition().x, 0, tagTarget.getPosition().z)
  end
  while (tagTarget.getQuantity() > 0) do
    local takenCard = tagTarget.takeObject({
      position = tempPosition,
    })
    tagSingleCard(takenCard.getGUID())
    coroutine.yield(0)
  end
  -- If the container is a deck it destroys itself once there's only a single
  -- card left.  Check the position of the deck to find the card and tag it
  -- as well
  if (isDeck) then
    -- Have to let the second-to-last card in the deck get out of the way so the
    -- position check won't hit it
    Wait.frames(function()
      local everything = getAllObjects()
      for _, object in ipairs(everything) do
        if (object.name == "Card") then
          local objPosition = Vector(object.getPosition().x, 0, object.getPosition().z)
          if (deckPosition:distance(objPosition) < 0.1) then
            tagSingleCard(object.getGUID())
            return 1
          end
        end
      end
    end, 90)
  end

  return 1
end

-- Starts the verification process for a given GUID
function verifyCards()
  local verifyTarget = getObjectFromGUID(verifyTargetGuid)
  if (verifyTarget.name == "Card") then
    verifySingleCard()
  elseif (verifyTarget.name == "Bag" or verifyTarget.name == "Deck") then
    startLuaCoroutine(self, "verifyContainer")
  else
    log("Verification target GUID does not point to a card, deck, or bag")
    return
  end
end

-- Verifies the correctness of a single card using the current value of
-- verifyTargetGuid.  Verification will parse the JSON metadata from the card's
-- GM Notes field, and check that it has an ID
function verifySingleCard()
  local verifyTarget = getObjectFromGUID(verifyTargetGuid)
  if (verifyTarget.getGMNotes() == nil or verifyTarget.getGMNotes() == "") then
    log(verifyTarget.getName().." has no metadata")
  else
    local metadata = JSON.decode(verifyTarget.getGMNotes())
    if (metadata.id == nil or metadata.id == "") then
      log(verifyTarget.getName().." has no ID set, probable bad metadata")
    end
  end
  log(verifyTarget.getName().." has proper metadata")
end

-- Verify all cards in a bag or deck.  The verification logic is the same, but
-- since we're doing it based on the container data rather than the card itself
-- the implementation does not leverage verifySingleCard
function verifyContainer()
  local verifyTarget = getObjectFromGUID(verifyTargetGuid)
  log(verifyTarget)
  local checkCount = 0
  local failCount = 0
  for _, cardData in ipairs(verifyTarget.getData().ContainedObjects) do
    local cardName = cardData.Nickname
    log("Checking "..cardName)
    if (cardData.GMNotes == nil or cardData.GMNotes == "") then
      log(cardName.." has no metadata")
      failCount = failCount + 1
    else
      local metadata = JSON.decode(cardData.GMNotes)
      if (metadata.id == nil or metadata.id == "") then
        log(cardName.." has no ID set, probable bad metadata")
        failCount = failCount + 1
      end
    end
    checkCount = checkCount + 1
    coroutine.yield(0)
  end
  log("Finished checking "..checkCount.." cards, "..failCount.." card(s) had problems")
  return 1
end

-- Starts the process to move all cards from one container to another
function moveToAllCardsBag()
  startLuaCoroutine(self, "moveCardsToBag")
end

-- Coroutine to move all cards from one container to another.  The target will
-- generally be the All Cards Bag, but the allCardsBagGuid could point to any
-- container.  Since we can't pass parameters to a coroutine, uses the values
-- stored in moveTargetGuid and allCardsBagGuid.
function moveCardsToBag()
  local allCardsBag = getObjectFromGUID(allCardsBagGuid)
  local moveFrom = getObjectFromGUID(moveTargetGuid)
  local isDeck = false
  local deckPosition
  if (moveFrom.name == "Deck") then
    isDeck = true
    deckPosition = Vector(moveFrom.getPosition().x, 0, moveFrom.getPosition().z)
  end
  while (moveFrom.getQuantity() > 0) do
    allCardsBag.putObject(moveFrom.takeObject());
    coroutine.yield(0)
  end
  -- If the container is a deck it destroys itself once there's only a single
  -- card left.  Check the position of the deck to find the card and move it
  -- as well
  if (isDeck) then
  -- Have to let the second-to-last card in the deck get out of the way so the
  -- position check won't hit it
    Wait.frames(function()
      local everything = getAllObjects()
      for _, object in ipairs(everything) do
        if (object.name == "Card") then
          local objPosition = Vector(object.getPosition().x, 0, object.getPosition().z)

          if (deckPosition:distance(objPosition) < 0.3) then
            allCardsBag.putObject(object)
            return 1
          end
        end
      end
    end, 90)
  end
  return 1
end
